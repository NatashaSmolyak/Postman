{
	"info": {
		"_postman_id": "de2fa145-ea33-4666-bd4b-ca5e447eed2d",
		"name": "Home_Work-3_Nata_Smolyak",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23528871"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"auth_token = responseData.token\r",
							"console.log(auth_token)\r",
							"pm.environment.set(\"auth_token\", auth_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "password",
							"value": "291071",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"let schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"item\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData= JSON.parse(request.data);\r",
							"let req_salary=requestData.salary;\r",
							"\r",
							"pm.test(\"u_salary_1.5_year from Response = Salary * 4 from Request\", function () {\r",
							"    pm.expect(responseData.person.u_salary_1_5_year).to.eql(req_salary*4)\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months from Response = Salary * 2.9 from Request\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(req_salary*2.9)\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months from Response = Salary * 2 from  Request\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"start_qa_salary from Response = Salary from Request\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"let u_salary_1_5_year = responseData.person.u_salary_1_5_year\r",
							"console.log(u_salary_1_5_year);\r",
							"pm.environment.set(\"u_salary_1_5_year\", responseData.person.u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\":51,\r\n\"salary\": 5000,\r\n\"name\": \"Nata\",\r\n\"auth_token\": \"{{auth_token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"  \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"            },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"        \"type\": \"array\",\r",
							"        \"item\": [\r",
							"            {\"type\": \"integer\"}, {\"type\":\"string\"}, {\"type\": \"string\"}\r",
							"            ]\r",
							"            }\r",
							"                },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = request.data;\r",
							"let req_salary = + requestData.salary;\r",
							"\r",
							"pm.test(\"Salary[0] from Response = Salary from Request\", function () {\r",
							"    pm.expect(responseData.salary[0]).to.eql(req_salary)\r",
							"});\r",
							"\r",
							"pm.test(\"Salary[1] from Response = Salary * 2 from Request\", function () {\r",
							"    pm.expect(responseData.salary[1]).to.eql((req_salary*2).toString())\r",
							"});\r",
							"\r",
							"pm.test(\"Salary[2] from Response = Salary * 3 from Request\", function () {\r",
							"    pm.expect(responseData.salary[2]).to.eql((req_salary*3).toString())\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"salary [2] > salary [1] and salary [2] > salary [0]\", function () {\r",
							"    const salaryCheck = responseData.salary[2] > responseData.salary[1] && responseData.salary[2] > responseData.salary[0]\r",
							"    pm.expect(salaryCheck).to.be.true\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "51",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"  \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"            },\r",
							"    \"daily_food\": {\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"        \"type\":\"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"        \r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = request.data;\r",
							"let req_weight = requestData.weight;\r",
							"\r",
							"pm.test(\"daily_food  from Response = weight * 0.012 from Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseData.daily_food).to.eql(req_weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep  from Response = weight * 2.5 from Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(responseData.daily_sleep).to.eql(req_weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "51",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "55",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let schema = \r",
							"{\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) Проверить что значение поля name = значению переменной name из окружения\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"let requestData = request.data;\r",
							"let req_age = requestData.age\r",
							"\r",
							"pm.test(\"Name from Response  = Name from Environment\", function () {\r",
							"       pm.expect(responseData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"//4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Age from Response  = Age from Request\", function () {\r",
							"        pm.expect(responseData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "51",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json()\r",
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"let randomCur = responseData[Math.floor(Math.random()*responseData.length)]\r",
							"console.log(randomCur)\r",
							"//2 В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"let CurID = randomCur.Cur_ID\r",
							"console.log('Cur_ID', CurID)\r",
							"pm.environment.set(\"Cur_ID\", randomCur.Cur_ID);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency ***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// 7) переходим к следующей итерации\r",
							"let responseData = pm.response.json();\r",
							"let token = pm.environment.get(\"auth_token\")  \r",
							"\r",
							"for(let i = 0; i < responseData.length; i++){\r",
							"    let currId = responseData[i].Cur_ID;\r",
							"    const requestCurrByn = {\r",
							"        'method': 'POST',\r",
							"        'url': 'http://54.157.99.22:80/curr_byn',\r",
							"        'body': {\r",
							"            'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key': 'auth_token', 'value': token},\r",
							"                {'key': 'curr_code', 'value': `${currId}`}\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"    pm.sendRequest(requestCurrByn, (err, response) => {\r",
							"        if(response.code === 200){\r",
							"            let respCurrByn = response.json();\r",
							"            if(pm.expect(respCurrByn).to.have.property(\"Cur_OfficialRate\")){\r",
							"            //console.log(respCurrByn)\r",
							"            console.log(JSON.stringify(respCurrByn, null, 1));\r",
							"\r",
							"            };\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							" let schema = \r",
							" {\r",
							"   \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}